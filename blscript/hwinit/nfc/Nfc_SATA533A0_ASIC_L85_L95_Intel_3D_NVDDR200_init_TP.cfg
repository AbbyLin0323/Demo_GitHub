ftableid nfc_id
//nfc setting+++++++++++++++++++++++++++++++++++++++++++++++++
//fill nfc related reg entry
udelay    0

//rNfcPgCfg                = 0xd1806008
memw32    (REG_BASE+0x1000)     0xd1806008

//rNfcMisc                 = 0x0fff0201;
memw32    (REG_BASE+0x1014)     0x0fff0201

//rNfcOtfbAdsBase          = 0x020001ff;
memw32    (REG_BASE+0x1018)     0x020001ff

//rNfcTCtrl0      = g_aAsyncTConfTab[ucIfType][ucMode].ulNfcTCtrl0;
memw32    (REG_BASE+0x1004)     0x538C8910

//rNfcTCtrl1      = g_aAsyncTConfTab[ucIfType][ucMode].ulNfcTCtrl1;
memw32    (REG_BASE+0x1008)     0x0010C48c

//rNfcTCtrl2      = g_aAsyncTConfTab[ucIfType][ucMode].ulNfcTCtrl2;
memw32    (REG_BASE+0x100c)     0x89

//rNfcModeConfig  = g_aAsyncTConfTab[ucIfType][ucMode].ulNfcModeConfig;
memw32    (REG_BASE+0x102c)     0x9a900

//rNfcEdoTCtrlECO          = 0x23000055;
//Only turn on Read ODT (for DDR400) or DDR200 heavy in loading. bit[7:0]EDO use default 0x55 ~mike,161102
//Write ODT disabled on NFC side. Since NAND will drive ODT in program cmd. ~mike,161102
memw32    (REG_BASE+0x1030)     0x03000055

//rNfcPRCQDelayTime        = 0x70381201;
memw32    (REG_BASE+0x1034)     0x70380901

//PMU NFCLK: 0-12.5M(NFPLL/16) 1-50M(NFPLL/8) 2-100M(NFPLL/4) 3-200M(NFPLL/2)
//SetReg_Entry    ($arg_reg_base+0x1f20)    ~(0x3)    0x0
//(TBD)if not set 0x1, vDiag will encounter PU setfeature fail at begin...~mike
clrbit32  (REG_BASE+0x1f20)     0x3
setbit32  (REG_BASE+0x1f20)     0x1


//interface init/reset/pumapping/set feature/
nfcinit
nfcreset
udelay    50
nfcupdate

//set feature
//Set feature should set 0x10/0x80 (output drive strength) first, and then set 0x1 (interface change)
//otherwise, the 0x10/0x80 set feature will not take effect.
//0x10,0x80: NAND Flash output drive strength, 
//          0x1=25-ohm (strong)
//          0x2=35-ohm (default)
//          0x3=50-ohm (weak)
//0x2: NFDDR200/300: NVDDR2, ODT=DIS, NoVref, SingleEnd,    <---
//     NFDDR400    : NVDDR2, ODT=EN150,  w/Vref, DiffMode, 
//0x1: [6]prog clear, [5:4]Data Interface, [3:0]timgin mode ~mike,161102
nfcset    0x85    0x3
nfcset    0x91    0x104
nfcset    0x10    0x2
nfcset    0x80    0x2
nfcset    0x92    0x0
nfcset    0xF5    0x2

nfcset    0x2     0x0
nfcset    0x1     0x64

//#p/x *0x1ff8000c bit[16]= 0x1 Disable WP pin (A2) 
setbit32  (REG_BASE+0x0c) (0x1<<16)

// NFC pad IO setting bit[3]:RHSNFDIFF;bit[2]:RHSNF_NV;bit[1]:RHSNF_LV;bit[0]:RHSNF_RS
//Change to SingleEnd, ODT-off, No-Vref, same as 2DTLC in SATA mode, ~Mike, 161028
// bit1.LV=0 for VT3533 in ROM code. ~mike,
clrbit32  (REG_BASE+0x000c)  0x1f
setbit32  (REG_BASE+0x000c)  0x10

//NFC Pad Driving setting 
//Use default in advance and may fine tune in future ~Mike, 161102
memw32    (REG_BASE+0x0090)    (0x88444444)
memw32    (REG_BASE+0x0094)    (0x88444444)
memw32    (REG_BASE+0x0098)    (0x88444444)
memw32    (REG_BASE+0x009c)    (0x88444444)

///**************** switch to sync mode ********************/
//pNfcPgCfg->bsIsMicron       = FALSE;
clrbit32  (REG_BASE+0x1000)  (0x1<<28)

//pNfcPgCfg->bsCeHoldEn       = TRUE;
setbit32  (REG_BASE+0x1000)  (0x1<<29)

//pNfcPgCfg->bsDDRCfg         = TRUE; pNfcPgCfg->bsDDRHfCfg       = TRUE;
clrbit32  (REG_BASE+0x1000)  (0x3<<7)
setbit32  (REG_BASE+0x1000)  (0x3<<7)

//pNfcPgCfg->bsLdpcNvddrMode  = FALSE;
clrbit32  (REG_BASE+0x1000)  (0x1<<17)

//enable recc report
setbit32  (REG_BASE+0x1000)  (0x1<<16)

//VT3533 ODT Option 0x1000[10], global option will override 0x1030 settings.
//NFDDR200/300: Disable NFC ODT to save more power <-- 
//NFDDR400    : Enable NFC ODT for better signal quality. ~Mike. 161102
setbit32  (REG_BASE+0x1000)  (0x0<<10)

//rNfcTCtrl0                = 0x50610bc8;
memw32    (REG_BASE+0x1004)     0x50690bc8

//rNfcTCtrl1                = 0xce119484;
//memw32    (REG_BASE+0x1008)     0xcc119484
memw32    (REG_BASE+0x1008)     0xcf119484

//rNfcTCtrl2                = 0xaf;
memw32    (REG_BASE+0x100c)     0xaf

//rNfcModeConfig            = 0x1fc9a900;
//memw32    (REG_BASE+0x102c)     0x1fc9a900
memw32    (REG_BASE+0x102c)     0x9fc9a900

//rNfcNfdmaCfg |= (1<<18);
//SetReg_Entry    ($arg_reg_base+0x10a0)    (~(0x1<<18))    (0x1<<18)|(0x1<<10)|(0x1<<2)|(0x1<<1)
clrbit32  (REG_BASE+0x10a0)  (0x1<<18)
setbit32  (REG_BASE+0x10a0)  (0x1<<18)|(0x1<<10)|(0x1<<2)|(0x1<<1)

//rNfcNfdmaCfg |= (1<<18);
////SetReg_Entry    ($arg_reg_base+0x1018)    (~(0x1<<30))    (0x1<<30)
//clrbit32  (REG_BASE+0x1018)  (0x1<<30)
//setbit32  (REG_BASE+0x1018)  (0x1<<30)

//0x1038[23:16] delay value for delay cells before DLYCOMP
//0x1078 DDR DLYCOMP config in sync mode
//For NFDDR200 and NFDDR300 ok, for NFDDR400 (TBD)...~mike, 161102
clrbit32  (REG_BASE+0x1038)  0xff<<16
setbit32  (REG_BASE+0x1038)  0xff<<16
memw32    (REG_BASE+0x1078)  0x70707070

//set NFPLL output frequence
//NFPLL divider 0x1F6C[9:8]=0x2,[6:0]=0x1f : NFPLL=400MHz
//NFPLL divider 0x1F6C[9:8]=0x2,[6:0]=0x17 : NFPLL=300MHz
//NFPLL divider 0x1F6C[9:8]=0x3,[6:0]=0x1f : NFPLL=200MHz  <--
//NFCLK divider 0x1F20[1:0]=0x3            : NFCLK=NFPLL div 2  <--
//NFCLK divider 0x1F20[1:0]=0x2            : NFCLK=NFPLL div 4
//NFCLK divider 0x1F20[1:0]=0x1            : NFCLK=NFPLL div 8
//NFCLK divider 0x1F20[1:0]=0x0            : NFCLK=NFPLL div 16
//NFDDR400=400/2=200MHz,set(0x21f,0x3)
//NFDDR300=300/2=150MHz,set(0x217,0x3)
//NFDDR200=200/2=100MHz,set(0x31f,0x3)  <-- ~mike. 161102
//memw16    (REG_BASE+0x1f6c)  0x31f
//0x1ff81f6c[28]= 1'b1 RCLKREQ_1t0BLOCK_EN : HW assert RBLOCK, Block FW turn off PLL or Power.
memw32 (REG_BASE+0x1f6c) 0x1000031f
clrbit32  (REG_BASE+0x1f20)  0x3
setbit32  (REG_BASE+0x1f20)  0x3

//0x1ff81000 bit[0] SATA mode set to 0; PCIE mode set to 1;
clrbit32  (REG_BASE+0x1000)  0x1<<0

//disable NFC clock gating
memw32    (REG_BASE+0x1070)     0x0
memw32    (REG_BASE+0x1074)     0x0

//For Intel (only) change to TLC mode, 
//For Micron, depend on factory setting, either MLC or TLC. ~Mike.

